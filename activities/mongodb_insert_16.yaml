description: NoBench data generator for inserting complex JSON objects.

scenarios:
  default:
    insert: run driver=mongodb connection=mongodb://localhost:27017 database=testSmallInsert tags==block:"insert.*", cycles===TEMPLATE(insert-cycles,16000) threads=auto errors=timer,warn

bindings:
  brown_corpus: Lines("~/mongo_benchmark/activities/brown_corpus_output.txt")

  seq_key: Mod(<<insert-cycles:1000000>>); ToString()

  # Unique Strings and Numbers
  str1: Sample(1, Zipfian(Values(brown_corpus)))
  str2: Sample(1, Zipfian(Values(brown_corpus)))
  num: Identity()

  # Boolean (50% true, 50% false)
  bool: Boolean()

  # Dynamic values (dyn1 and dyn2)
  # 95% num, 5% str1
  dyn1: CoinFunc(0.95, num, str1)
  # 1/3 str1, 1/3 num, 1/3 bool
  inner_dyn2: CoinFunc(0.5, num, bool)
  dyn2: CoinFunc(0.33, str1, inner_dyn2)

  # Nested array of strings from the Brown Corpus
  nested_arr_size: Mod(7); Add(1) -> Integer
  nested_arr: Sample(nested_arr_size, Zipfian(brown_corpus));
  
  str1_lst: List(str1, 16000)
  nested_obj_str: Sample(1, str1_list)
  nested_obj_num: Random(0, 16000)

  # Sparse clustering logic
  sparse_cluster: Mod(<<insert-cycles:100>>)  # Generates a cluster number (0 to 99)

  # Random values for the 10 sparse attributes, chosen from a set of 10 strings
  sparse_value_set: [
    "sparse_value_1", "sparse_value_2", "sparse_value_3", "sparse_value_4", 
    "sparse_value_5", "sparse_value_6", "sparse_value_7", "sparse_value_8", 
    "sparse_value_9", "sparse_value_10"
  ]

  # Each sparse attribute in the cluster is assigned a random value from the set of 10 strings
  sparse_values_0: Sample(1, sparse_value_set)
  sparse_values_1: Sample(1, sparse_value_set)
  sparse_values_2: Sample(1, sparse_value_set)
  sparse_values_3: Sample(1, sparse_value_set)
  sparse_values_4: Sample(1, sparse_value_set)
  sparse_values_5: Sample(1, sparse_value_set)
  sparse_values_6: Sample(1, sparse_value_set)
  sparse_values_7: Sample(1, sparse_value_set)
  sparse_values_8: Sample(1, sparse_value_set)
  sparse_values_9: Sample(1, sparse_value_set)

  # Thousandth mod value
  thousandth: num; Mod(<<insert-cycles:1000>>) -> Integer

blocks:
  insert:
    params:
      readPreference: primary
    ops:
      insert: >2
        {
          insert: "<<collection:keyvalue>>",
          documents: [
            { 
              _id: {seq_key}, 
              str1: {str1}, 
              str2: {str2}, 
              num: {num}, 
              bool: {bool},
              dyn1: {dyn1},
              dyn2: {dyn2},
              nested_arr: {nested_arr},
              nested_obj: {
                str: nested_obj_str,
                num: nested_obj_num
              },
              thousandth: {thousandth},
              sparse_<<sparse_cluster>>0: {sparse_values_0},
              sparse_<<sparse_cluster>>1: {sparse_values_1},
              sparse_<<sparse_cluster>>2: {sparse_values_2},
              sparse_<<sparse_cluster>>3: {sparse_values_3},
              sparse_<<sparse_cluster>>4: {sparse_values_4},
              sparse_<<sparse_cluster>>5: {sparse_values_5},
              sparse_<<sparse_cluster>>6: {sparse_values_6},
              sparse_<<sparse_cluster>>7: {sparse_values_7},
              sparse_<<sparse_cluster>>8: {sparse_values_8},
              sparse_<<sparse_cluster>>9: {sparse_values_9}
            }
          ]
        }
