description: Testing Identity function for generating sequential integer num

scenarios:
  default:
    insert: run driver=mongodb connection=mongodb://localhost:27017 database=testData tags==block:"insert.*" cycles===TEMPLATE(rampup-cycles,10) threads=1

bindings:
  num: Identity()
  bool: HashInterval(2); ToBoolean()
  zipf: CSVSampler('Text','Zipf_Value','sum','activities/output_with_zipf.csv'); Prefix('"'); Suffix('"')
  sparse_val: HashInterval(99); Format('%02d')
  str_1: AlphaNumericString(50); Prefix('"'); Suffix('"'); SaveString('str_1')
  str_other: Add(-1); Add(<<rampup-cycles:10>>); Mod(<<rampup-cycles:10>>); AlphaNumericString(50); Prefix('"'); Suffix('"')
  num_other: Hash(); Mod(<<rampup-cycles:10>>)
  str_2: Hash(); AlphaNumericString(50); Prefix('"'); Suffix('"')
  dyn1: Identity(); CoinFunc(0.95, Identity(), LoadString('str_1'))
  # FixedValue(56L) should technically be 'bool' from above, but using Flow(HashInterval(2), ToBoolean()) was crashing and I could not find an alternative solution
  dyn2: Identity(); CoinFunc(0.33, FixedValue(56L), CoinFunc(0.5, Identity(), LoadString('str_1')))
  thousandth: Mod(1000)
  zip_fs: ListSizedHashed(Mod(8), Flow(CSVSampler('Text','Zipf_Value','sum','activities/output_with_zipf.csv'), Prefix('"'), Suffix('"')))
  sparse_0_str: HashInterval(99); Mod(<<rampup-cycles:10>>); AlphaNumericString(50); Prefix('"'); Suffix('"')
  sparse_1_str: HashInterval(99); Add(1); Mod(<<rampup-cycles:10>>); AlphaNumericString(50); Prefix('"'); Suffix('"')
  sparse_2_str: HashInterval(99); Add(2); Mod(<<rampup-cycles:10>>); AlphaNumericString(50); Prefix('"'); Suffix('"')
  sparse_3_str: HashInterval(99); Add(3); Mod(<<rampup-cycles:10>>); AlphaNumericString(50); Prefix('"'); Suffix('"')
  sparse_4_str: HashInterval(99); Add(4); Mod(<<rampup-cycles:10>>); AlphaNumericString(50); Prefix('"'); Suffix('"')
  sparse_5_str: HashInterval(99); Add(5); Mod(<<rampup-cycles:10>>); AlphaNumericString(50); Prefix('"'); Suffix('"')
  sparse_6_str: HashInterval(99); Add(6); Mod(<<rampup-cycles:10>>); AlphaNumericString(50); Prefix('"'); Suffix('"')
  sparse_7_str: HashInterval(99); Add(7); Mod(<<rampup-cycles:10>>); AlphaNumericString(50); Prefix('"'); Suffix('"')
  sparse_8_str: HashInterval(99); Add(8); Mod(<<rampup-cycles:10>>); AlphaNumericString(50); Prefix('"'); Suffix('"')
  sparse_9_str: HashInterval(99); Add(9); Mod(<<rampup-cycles:10>>); AlphaNumericString(50); Prefix('"'); Suffix('"')

blocks:
  insert:
    ops:
      insert: >2
        {
          insert: "<<collection:test_data>>",
          documents: [
            { 
              str1: {str_1},
              str2: {str_2},
              num: {num},
              bool: {bool},
              dyn1: {dyn1},
              dyn2: {dyn2},
              nested_arr: {zip_fs},
              nested_obj: {
                str: {str_other},
                num: {num_other}
              },
              sparse_{sparse_val}0: {sparse_0_str},
              sparse_{sparse_val}1: {sparse_1_str},
              sparse_{sparse_val}2: {sparse_2_str},
              sparse_{sparse_val}3: {sparse_3_str},
              sparse_{sparse_val}4: {sparse_4_str},
              sparse_{sparse_val}5: {sparse_5_str},
              sparse_{sparse_val}6: {sparse_6_str},
              sparse_{sparse_val}7: {sparse_7_str},
              sparse_{sparse_val}8: {sparse_8_str},
              sparse_{sparse_val}9: {sparse_9_str},
            }
          ]
        }
